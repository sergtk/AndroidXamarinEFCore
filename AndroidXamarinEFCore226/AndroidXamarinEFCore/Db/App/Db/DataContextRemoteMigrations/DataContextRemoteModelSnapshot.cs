// <auto-generated />
using System;
using App.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.DbAdmin.Migrations
{
    [DbContext(typeof(DataContextRemote))]
    partial class DataContextRemoteModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Db.Entities.Remote.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVirtual")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.Machine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId");

                    b.Property<bool>("IsVirtual");

                    b.Property<long?>("MachineModelId");

                    b.Property<string>("OptionsInstalled");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MachineModelId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.MachineModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVirtual");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("MachineModels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsVirtual = false,
                            Name = "AAA"
                        },
                        new
                        {
                            Id = 2L,
                            IsVirtual = false,
                            Name = "BBB"
                        },
                        new
                        {
                            Id = 3L,
                            IsVirtual = false,
                            Name = "CCC"
                        });
                });

            modelBuilder.Entity("App.Db.Entities.Remote.ProblemArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ProblemAreas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Software"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Mechanical"
                        });
                });

            modelBuilder.Entity("App.Db.Entities.Remote.SupportTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("Created");

                    b.Property<string>("Description");

                    b.Property<long?>("MachineId");

                    b.Property<long?>("ProblemAreaId");

                    b.Property<string>("Title");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProblemAreaId");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileDataChunk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ChunkData");

                    b.Property<int>("ChunkIndexInFile");

                    b.Property<long>("TechResFileDescriptorId");

                    b.HasKey("Id");

                    b.HasIndex("TechResFileDescriptorId", "ChunkIndexInFile")
                        .IsUnique();

                    b.ToTable("TechResFileDataChunks");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileDescriptor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DataChunkCount");

                    b.Property<string>("FileName");

                    b.Property<long>("FileSize");

                    b.Property<string>("MimeType");

                    b.Property<long>("PrivilegeRefId");

                    b.Property<DateTimeOffset?>("TimeModified");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TechResFileDescriptors");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileMachineModelAccessDescriptor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDerived");

                    b.Property<long>("MachineModelId");

                    b.Property<long>("TechResFileDescriptorId");

                    b.HasKey("Id");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("TechResFileDescriptorId", "MachineModelId")
                        .IsUnique();

                    b.ToTable("TechResFileMachineModelAccessDescriptors");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileParent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChildTechResFileDescriptorId");

                    b.Property<long?>("ParentTechResFileDescriptorId");

                    b.HasKey("Id");

                    b.HasIndex("ChildTechResFileDescriptorId", "ParentTechResFileDescriptorId")
                        .IsUnique()
                        .HasFilter("[ChildTechResFileDescriptorId] IS NOT NULL AND [ParentTechResFileDescriptorId] IS NOT NULL");

                    b.HasIndex("ParentTechResFileDescriptorId", "ChildTechResFileDescriptorId")
                        .IsUnique()
                        .HasFilter("[ParentTechResFileDescriptorId] IS NOT NULL AND [ChildTechResFileDescriptorId] IS NOT NULL");

                    b.ToTable("TechResFileParents");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TextFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<DateTimeOffset?>("LastModified");

                    b.Property<bool>("PrivilegeRegisteredUserRead");

                    b.Property<bool>("PrivilegeUnregisteredUserRead");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique()
                        .HasFilter("[FileName] IS NOT NULL");

                    b.ToTable("TextFiles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FileName = "TechnicalResourcesDirectoryReg",
                            PrivilegeRegisteredUserRead = true,
                            PrivilegeUnregisteredUserRead = false,
                            Text = @"{
  ""Type"": ""CategoryList"",
  ""Children"": [
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Local Category"",
      ""Children"": [
        {
          ""Type"": ""Image"",
          ""Title"": ""aim-members.jpg on 127.0.0.1"",
          ""DataUri"": ""http://127.0.0.1/aim/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""aim-members.jpg on 10.0.2.2"",
          ""DataUri"": ""http://10.0.2.2/aim/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""password-protected.jpg on 127.0.0.1"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/password-protected.jpg"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""PDF"",
          ""Title"": ""BW.pdf on 127.0.0.1 (password protected)"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/BW.pdf"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-xDHx video on 127.0.0.1 (password protected)"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/doubleheader-1-670.mp4"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""password-protected.jpg on 10.0.2.2"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/password-protected.jpg"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""PDF"",
          ""Title"": ""BW.pdf on 10.0.2.2 (password protected)"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/BW.pdf"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-xDHx video on 10.0.2.2 (password protected)"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/doubleheader-1-670.mp4"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        }

      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category0 (Dev)"",
      ""Children"": [
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category00"",
          ""Children"": [
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category000""
            },
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category001""
            },
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category002""
            }
          ]
        },
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category01""
        },
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category02""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Photos"",
      ""Children"": [
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM members 1200x608"",
          ""DataUri"": ""https://www.aimmachines.com/wp-content/uploads/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM HQ 340x183"",
          ""DataUri"": ""https://www.aimmachines.com/wp-content/uploads/aimusa.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""Landscape 3360x2108"",
          ""DataUri"": ""https://images.pexels.com/photos/371633/pexels-photo-371633.jpeg?cs=srgb&dl=clouds-country-daylight-371633.jpg&fm=jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM Logo (FTP)"",
          ""DataUri"": ""ftp://ftp.aimmachines.com/sandbox/aim_logo_main.png"",
          ""UserName"": ""aimapp1@aimmachines.com"",
          ""Password"": ""3X;2v7C*R{rK""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""PDFs"",
      ""Children"": [
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AccuPress"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/Accupress.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AccuWeld"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/Accuweld.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""SA300"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/SA300.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AFE 3Dx"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/AFE-3D.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""Metamorphosis book"",
          ""DataUri"": ""https://s3-us-west-2.amazonaws.com/pressbooks-samplefiles/MetamorphosisJacksonTheme/Metamorphosis-jackson.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""A Simple PDF File "",
          ""DataUri"": ""http://www.africau.edu/images/default/sample.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""Image as PDF"",
          ""DataUri"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpWRjDJ_3cgrh30LraRmBCrccEmt-ucHIyt1oUcBvZ20e0IX-V""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""BW (FTP)"",
          ""DataUri"": ""ftp://ftp.aimmachines.com/sandbox/BW.pdf"",
          ""UserName"": ""aimapp1@aimmachines.com"",
          ""Password"": ""3X;2v7C*R{rK""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Videos"",
      ""Children"": [
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-2Dx"",
          ""DataUri"": ""https://www.aimmachines.com/movies/afe2d-1080p.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFC 3Dx"",
          ""DataUri"": ""https://www.aimmachines.com/videos/compact3d-3-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AccuThread"",
          ""DataUri"": ""https://www.aimmachines.com/videos/double-end-threading-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AccuPress"",
          ""DataUri"": ""https://www.aimmachines.com/videos/accupress-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon ElephantsDream"",
          ""DataUri"": ""https://archive.org/download/ElephantsDream/ed_hd_512kb.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon BigBuckBunny"",
          ""DataUri"": ""https://archive.org/download/BigBuckBunny_328/BigBuckBunny_512kb.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon Sintel"",
          ""DataUri"": ""https://archive.org/download/Sintel/sintel-2048-stereo_512kb.mp4""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category1""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category2""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category3""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category4""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category5""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category6""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category7""
    }
  ]
}"
                        },
                        new
                        {
                            Id = 2L,
                            FileName = "TechnicalResourcesDirectoryNonReg",
                            PrivilegeRegisteredUserRead = false,
                            PrivilegeUnregisteredUserRead = true,
                            Text = @"{
  ""Type"": ""CategoryList"",
  ""Children"": [
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Local Category"",
      ""Children"": [
        {
          ""Type"": ""Image"",
          ""Title"": ""aim-members.jpg on 127.0.0.1"",
          ""DataUri"": ""http://127.0.0.1/aim/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""aim-members.jpg on 10.0.2.2"",
          ""DataUri"": ""http://10.0.2.2/aim/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""password-protected.jpg on 127.0.0.1"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/password-protected.jpg"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""PDF"",
          ""Title"": ""BW.pdf on 127.0.0.1 (password protected)"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/BW.pdf"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-xDHx video on 127.0.0.1 (password protected)"",
          ""DataUri"": ""http://127.0.0.1/aim/auth/doubleheader-1-670.mp4"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""password-protected.jpg on 10.0.2.2"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/password-protected.jpg"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""PDF"",
          ""Title"": ""BW.pdf on 10.0.2.2 (password protected)"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/BW.pdf"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-xDHx video on 10.0.2.2 (password protected)"",
          ""DataUri"": ""http://10.0.2.2/aim/auth/doubleheader-1-670.mp4"",
          ""UserName"": ""john"",
          ""Password"": ""777""
        }

      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category0 (Dev)"",
      ""Children"": [
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category00"",
          ""Children"": [
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category000""
            },
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category001""
            },
            {
              ""Type"": ""CategoryList"",
              ""Title"": ""Category002""
            }
          ]
        },
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category01""
        },
        {
          ""Type"": ""CategoryList"",
          ""Title"": ""Category02""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Photos"",
      ""Children"": [
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM members 1200x608"",
          ""DataUri"": ""https://www.aimmachines.com/wp-content/uploads/aim-members.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM HQ 340x183"",
          ""DataUri"": ""https://www.aimmachines.com/wp-content/uploads/aimusa.jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""Landscape 3360x2108"",
          ""DataUri"": ""https://images.pexels.com/photos/371633/pexels-photo-371633.jpeg?cs=srgb&dl=clouds-country-daylight-371633.jpg&fm=jpg""
        },
        {
          ""Type"": ""Image"",
          ""Title"": ""AIM Logo (FTP)"",
          ""DataUri"": ""ftp://ftp.aimmachines.com/sandbox/aim_logo_main.png"",
          ""UserName"": ""aimapp1@aimmachines.com"",
          ""Password"": ""3X;2v7C*R{rK""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""PDFs"",
      ""Children"": [
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AccuPress"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/Accupress.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AccuWeld"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/Accuweld.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""SA300"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/SA300.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""AFE 3Dx"",
          ""DataUri"": ""https://www.aimmachines.com/pdf/AFE-3D.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""Metamorphosis book"",
          ""DataUri"": ""https://s3-us-west-2.amazonaws.com/pressbooks-samplefiles/MetamorphosisJacksonTheme/Metamorphosis-jackson.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""A Simple PDF File "",
          ""DataUri"": ""http://www.africau.edu/images/default/sample.pdf""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""Image as PDF"",
          ""DataUri"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpWRjDJ_3cgrh30LraRmBCrccEmt-ucHIyt1oUcBvZ20e0IX-V""
        },
        {
          ""Type"": ""Pdf"",
          ""Title"": ""BW (FTP)"",
          ""DataUri"": ""ftp://ftp.aimmachines.com/sandbox/BW.pdf"",
          ""UserName"": ""aimapp1@aimmachines.com"",
          ""Password"": ""3X;2v7C*R{rK""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Videos"",
      ""Children"": [
        {
          ""Type"": ""Video"",
          ""Title"": ""AFE-2Dx"",
          ""DataUri"": ""https://www.aimmachines.com/movies/afe2d-1080p.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AFC 3Dx"",
          ""DataUri"": ""https://www.aimmachines.com/videos/compact3d-3-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AccuThread"",
          ""DataUri"": ""https://www.aimmachines.com/videos/double-end-threading-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""AccuPress"",
          ""DataUri"": ""https://www.aimmachines.com/videos/accupress-670.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon ElephantsDream"",
          ""DataUri"": ""https://archive.org/download/ElephantsDream/ed_hd_512kb.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon BigBuckBunny"",
          ""DataUri"": ""https://archive.org/download/BigBuckBunny_328/BigBuckBunny_512kb.mp4""
        },
        {
          ""Type"": ""Video"",
          ""Title"": ""Cartoon Sintel"",
          ""DataUri"": ""https://archive.org/download/Sintel/sintel-2048-stereo_512kb.mp4""
        }
      ]
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category1""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category2""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category3""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category4""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category5""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category6""
    },
    {
      ""Type"": ""CategoryList"",
      ""Title"": ""Category7""
    }
  ]
}"
                        });
                });

            modelBuilder.Entity("App.Db.Entities.Remote.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPasswordUpdateRequired");

                    b.Property<bool>("IsRegistered");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<bool>("PrivilegeContentManager")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("PrivilegeManufacturerAdmin")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid")
                        .HasName("AlternateKey_Guid");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.UserCompany", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PrivilegeManageUsers")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "CompanyId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserCompanies");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.UserPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordEncoded")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId")
                        .HasName("AlternateKey_UserId");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.Machine", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("App.Db.Entities.Remote.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.SupportTicket", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.Machine", "Machine")
                        .WithMany("SupportTickets")
                        .HasForeignKey("MachineId");

                    b.HasOne("App.Db.Entities.Remote.ProblemArea", "ProblemArea")
                        .WithMany("SupportTickets")
                        .HasForeignKey("ProblemAreaId");

                    b.HasOne("App.Db.Entities.Remote.User", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileDataChunk", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.TechResFileDescriptor", "TechResFileDescriptor")
                        .WithMany()
                        .HasForeignKey("TechResFileDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileMachineModelAccessDescriptor", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.MachineModel", "MachineModel")
                        .WithMany()
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Db.Entities.Remote.TechResFileDescriptor", "TechResFileDescriptor")
                        .WithMany("AccessDescriptors")
                        .HasForeignKey("TechResFileDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Db.Entities.Remote.TechResFileParent", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.TechResFileDescriptor", "ChildTechResFileDescriptor")
                        .WithMany("Children")
                        .HasForeignKey("ChildTechResFileDescriptorId");

                    b.HasOne("App.Db.Entities.Remote.TechResFileDescriptor", "ParentTechResFileDescriptor")
                        .WithMany("Parents")
                        .HasForeignKey("ParentTechResFileDescriptorId");
                });

            modelBuilder.Entity("App.Db.Entities.Remote.UserCompany", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Db.Entities.Remote.User", "User")
                        .WithMany("UserCompanies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("App.Db.Entities.Remote.UserPassword", b =>
                {
                    b.HasOne("App.Db.Entities.Remote.User", "User")
                        .WithOne("UserPassword")
                        .HasForeignKey("App.Db.Entities.Remote.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
